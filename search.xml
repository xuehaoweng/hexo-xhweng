<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FastAPI</title>
      <link href="/2023/07/18/fastapi/"/>
      <url>/2023/07/18/fastapi/</url>
      
        <content type="html"><![CDATA[<p>FastAPI 是一个用于构建 API 的现代、快速（高性能）的 web 框架，使用 Python 3.6+ 并基于标准的 Python 类型提示。</p><p>关键特性:</p><ul><li><p>快速：可与 NodeJS 和 Go 并肩的极高性能（归功于 Starlette 和 Pydantic）。最快的 Python web 框架之一。</p></li><li><p>高效编码：提高功能开发速度约 200％ 至 300％。*</p></li><li><p>更少 bug：减少约 40％ 的人为（开发者）导致错误。*</p></li><li><p>智能：极佳的编辑器支持。处处皆可自动补全，减少调试时间。</p></li><li><p>简单：设计的易于使用和学习，阅读文档的时间更短。</p></li><li><p>简短：使代码重复最小化。通过不同的参数声明实现丰富功能。bug 更少。</p></li><li><p>健壮：生产可用级别的代码。还有自动生成的交互式文档。</p></li><li><p>标准化：基于（并完全兼容）API 的相关开放标准 OpenAPI (以前被称为 Swagger) 和 JSON Schema。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django</title>
      <link href="/2023/07/18/django/"/>
      <url>/2023/07/18/django/</url>
      
        <content type="html"><![CDATA[<h2 id="Django是什么"><a href="#Django是什么" class="headerlink" title="Django是什么"></a>Django是什么</h2><p>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。2019年12月2日，Django 3. 0发布 [1]  。</p><p>Django 最初被设计用于具有快速开发需求的新闻类站点，目的是要实现简单快捷的网站开发</p><p>Django是基于python的一个Web应用框架，与Flask框架不同的是，Django奉行”包含一切”的理念。该理念为创建Web应用所需的通用功能都应该包含到框架中，而不该存在独立的软件包中。例如：URL路由，对象关系映射(ORM)，数据库的迁移，模板系统以及身份验证等功能都已包含在框架中，虽然对于某些程序员来可能灵活度不太够，但却可以让你在构建网站的时候更加有效率。</p><h2 id="Django的工作方式"><a href="#Django的工作方式" class="headerlink" title="Django的工作方式"></a>Django的工作方式</h2><p>Django是一个MVT框架，即模型M(Model)，视图V(View)和模版T(Template)。其架构模板看上去和MVC没太大区别。Django将MVC的视图进一步分解为Django视图和Django模板两个部分，分别用于“展现哪些数据”和“如何展现”，使得Django的模板在需要时可以随时替换，而不仅仅局限于内置的模板。MVC的控制器部分，由Django框架的URL来实现，</p><p>MVT模型如下：</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/05/MTV-Diagram.png"></p><p>具体流程如下：</p><ol><li>浏览器首先执行Http Request</li><li>Django把请求根据URL分配到相应的View视图</li><li>View进行数据库的操作或其他运算</li><li>View将数据发送到Template进行渲染，并返回Http Respose响应内容</li><li>浏览器根据Http Respose响应渲染出网页内容</li></ol><p>用户操作流程:</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/05/1589777036-2760-fs1oSv4dOWAwC5yW.png"></p><h2 id="Django框架的核心"><a href="#Django框架的核心" class="headerlink" title="Django框架的核心"></a>Django框架的核心</h2><p>包括：一个面向对象的映射器（ORM），用作数据模型和关系性数据库间的媒介；一个基于正则表达式的URL分发器；一个视图系统，用于处理请求；以及一个模板系统。除此之外还包含：</p><ol><li>一个轻量级的、独立的Web服务器，用于开发和测试</li><li>中间件支持，允许对请求处理的各个阶段进行干涉</li><li>一个表单序列化及验证系统，用于HTML表单和适于数据库存储的数据之间的转换</li><li>防止跨站请求伪造（cross-site request forgery）的工具</li><li>一个缓存框架，并有几种缓存方式可供选择等</li></ol><h2 id="Django的优缺点"><a href="#Django的优缺点" class="headerlink" title="Django的优缺点"></a>Django的优缺点</h2><p>【Django的优点】</p><ol><li><p>功能完善、要素齐全：自带大量常用工具和框架（比如分页，auth，权限管理), 适合快速开发企业级网站<br>完善的文档：经过十多年的发展和完善，Django有广泛的实践案例和完善的在线文档。开发者遇到问题时可以搜索在线文档寻求解决方案</p></li><li><p>强大的数据库访问组件：Django的Model层自带数据库ORM组件，使得开发者无须学习SQL语言即可对数据库进行操作</p></li><li><p>Django先进的App设计理念: App是可插拔的，是不可多得的思想。不需要了，可以直接删除，对系统整体影响不大</p></li><li><p>自带台管理系统admin：只需要通过简单的几行配置和代码就可以实现一个完整的后台数据管理控制平台</p></li><li><p>Django debug信息详尽: 很容易找出代码错误所在</p></li></ol><p>【Django的缺点】</p><ol><li>大包大揽: 对于一些轻量级应用不需要的功能模块Django也包括了，不如Flask轻便</li><li>过度封装: 很多类和方法都封装了，直接使用比较简单，但改动起来就比较困难</li><li>性能劣势: 与C, C++性能上相比，Django性能偏低，当然这是python的问题，其它python框架在流量上来后会有同样问题</li><li>模板问题: django的模板实现了代码和样式完全分离，不允许模板里出现python代码，灵活度对某些程序员来说可能不够</li></ol><h2 id="设计理念¶"><a href="#设计理念¶" class="headerlink" title="设计理念¶"></a>设计理念¶</h2><p>本文档解释了 Django 开发人员在开发 Django 时使用的一些基本哲学， 它的目标是解释过去并指导未来</p><h3 id="总体¶"><a href="#总体¶" class="headerlink" title="总体¶"></a>总体¶</h3><h4 id="松耦合¶"><a href="#松耦合¶" class="headerlink" title="松耦合¶"></a>松耦合¶</h4><p>Django 栈的基本目标是 低耦合高内聚。框架里的不同层（Layers）不应该知道对方的代码，除非它们确实需要。</p><p>例如，模板系统不需要知道用户的 Web 请求，数据库层不需要了解视图层，而视图层并不关心程序员所使用的模板系统。</p><p>尽管为了方便 Django 带有一个完整的堆栈，但堆栈的各个部分尽可能独立于另一个堆栈。</p><h4 id="更少的代码¶"><a href="#更少的代码¶" class="headerlink" title="更少的代码¶"></a>更少的代码¶</h4><p>Django 应用的代码应该尽可能地精简，Django 应该充分利用 Python 的动态能力，比如自省机制（introspection）。</p><h4 id="快速开发¶"><a href="#快速开发¶" class="headerlink" title="快速开发¶"></a>快速开发¶</h4><p>在 21 世纪，Web 框架的核心一点是让 Web 开发中枯燥的事情处理得更加快速，Django 可以做到快速的 Web 开发。</p><h4 id="不要重复地造轮子-DRY-¶"><a href="#不要重复地造轮子-DRY-¶" class="headerlink" title="不要重复地造轮子 (DRY)¶"></a>不要重复地造轮子 (DRY)¶</h4><p>每个独特的概念或数据片应该存在且只存在于一个地方。避免冗余，做好标准化。</p><p>合理的框架应该从尽可能少的信息中推断出尽可能多的需求。</p><h4 id="明确优于隐式¶"><a href="#明确优于隐式¶" class="headerlink" title="明确优于隐式¶"></a>明确优于隐式¶</h4><p>这是在 PEP 20 列出的核心 Python 原则，这意味着 Django 不应该使用太多的“魔术”。除非有一个很好的理由，否则不应该出现魔术。只有当魔术创造了巨大的便利，并且使用其他方式难以实现时，它才值得使用，而且它的实现方式并不会让试图学习如何使用该功能的开发人员感到困惑。</p><h4 id="一致性¶"><a href="#一致性¶" class="headerlink" title="一致性¶"></a>一致性¶</h4><p>框架应在所有层级上保持一致。一致性适用于从低级（Python 的编码风格）到高级（使用 Django 的“经验”）的所有内容。</p><h3 id="模型¶"><a href="#模型¶" class="headerlink" title="模型¶"></a>模型¶</h3><h4 id="明确优于隐式¶-1"><a href="#明确优于隐式¶-1" class="headerlink" title="明确优于隐式¶"></a>明确优于隐式¶</h4><p>字段不应该仅仅根据字段的名称来假定某些行为。这需要对系统有太多了解，并且容易出现错误。相反，其行为应该基于关键字参数，并且在某些情况下，应该基于字段的类型。</p><h4 id="包括所有相关领域逻辑¶"><a href="#包括所有相关领域逻辑¶" class="headerlink" title="包括所有相关领域逻辑¶"></a>包括所有相关领域逻辑¶</h4><p>模型应该封装一个“对象”的各个方面，遵循 Martin Fowler 的 Active Record 设计模式。</p><p>这就是为什么在模型类中要同时定义一个模型表现的数据以及关于它的信息（包括其人类可读的名称，默认排序等选项）；所有用于理解给定模型所需的信息都应该存储在模型中。</p><h3 id="数据库API¶"><a href="#数据库API¶" class="headerlink" title="数据库API¶"></a>数据库API¶</h3><p>数据库API的主要用处：</p><h4 id="SQL效率¶"><a href="#SQL效率¶" class="headerlink" title="SQL效率¶"></a>SQL效率¶</h4><p>应该尽可能少地执行SQL语句，并且应该在内部优化语句。</p><p>这就是为什么开发者需要显式地调用 save()，而不是由框架静默地在幕后保存东西。</p><p>这也是为什么 select_related() QuerySet 方法存在的原因。在查询“每个关联的对象”的常见情况下，它是一个可选的性能提升器。</p><h4 id="简洁-强大的语法¶"><a href="#简洁-强大的语法¶" class="headerlink" title="简洁, 强大的语法¶"></a>简洁, 强大的语法¶</h4><p>数据库 API 应该允许用尽可能少的语法，来表达丰富、达意的语句。它不应该依赖于导入其他模块或辅助对象。</p><p>当必要时, 在幕后插入应该是自动进行的.</p><p>每一个对象都应该能够访问所有相关的对象, 系统范围. 这种访问应该是双向的.</p><h4 id="当有必要时-可方便地选择使用原始-SQL-语句¶"><a href="#当有必要时-可方便地选择使用原始-SQL-语句¶" class="headerlink" title="当有必要时, 可方便地选择使用原始 SQL 语句¶"></a>当有必要时, 可方便地选择使用原始 SQL 语句¶</h4><p>应该认识到数据库 API 只是一个便捷的方法，但并不必须是最终的全部手段。框架应该可以很容易地编写自定义的 SQL——完整的语句，或者仅仅是自定义 WHERE 子句作为 API 调用时的自定义参数。</p><h3 id="URL-设计¶"><a href="#URL-设计¶" class="headerlink" title="URL 设计¶"></a>URL 设计¶</h3><h4 id="松耦合¶-1"><a href="#松耦合¶-1" class="headerlink" title="松耦合¶"></a>松耦合¶</h4><p>Django 应用中的 URL 不应该与底层 Python 代码耦合。将 URL 与 Python 函数名联系起来是一件很糟糕且丑陋的做法。</p><p>按照这些方法，Django URL 系统应该允许同一应用的 URL 在不同的上下文中有所不同。例如，一个网站可以在 &#x2F;stories&#x2F; 中放置故事，而另一个网站则可以使用 &#x2F;news&#x2F;。</p><h4 id="无限的灵活性¶"><a href="#无限的灵活性¶" class="headerlink" title="无限的灵活性¶"></a>无限的灵活性¶</h4><p>URL 应该尽可能灵活。任何可想到的 URL 设计都应该被允许。</p><h4 id="鼓励最佳实践¶"><a href="#鼓励最佳实践¶" class="headerlink" title="鼓励最佳实践¶"></a>鼓励最佳实践¶</h4><p>框架可以做到让开发者简单（或更加简单）地设计出漂亮的，而不是难看的 URL。</p><p>在 URL 中应避免出现文件后缀名。</p><p>在 URL 中使用 Vignette 式的逗号应该受到严厉的惩罚。</p><h4 id="定义URL¶"><a href="#定义URL¶" class="headerlink" title="定义URL¶"></a>定义URL¶</h4><p>技术上，foo.com&#x2F;bar 和 foo.com&#x2F;bar&#x2F; 是两条不同的 URL，搜索引擎爬虫（以及某些 Web 流量分析工具）会将其视为独立的页面。Django 会将其转为 “标准” 的 URL，让搜索引擎爬虫正确识别。</p><p>详细请参考 APPEND_SLASH 配置。</p><blockquote><p>默认： True,当设置为 True 时，如果请求的 URL 不符合 URLconf 中的任何模式，并且不以斜线结尾，则会发出一个 HTTP 重定向到相同的URL，并附加一个斜线。注意，重定向可能会导致 POST 请求中提交的任何数据丢失。APPEND_SLASH 的配置只有在安装了 CommonMiddleware 的情况下才会使用</p></blockquote><h3 id="模板系统¶"><a href="#模板系统¶" class="headerlink" title="模板系统¶"></a>模板系统¶</h3><h4 id="逻辑分离的解决方案¶"><a href="#逻辑分离的解决方案¶" class="headerlink" title="逻辑分离的解决方案¶"></a>逻辑分离的解决方案¶</h4><p>我们将模板系统看作一个工具，用于控制表现方式和表示方式相关的逻辑。模板系统不应该支持超出这个基本目标的功能。</p><h4 id="避免冗余¶"><a href="#避免冗余¶" class="headerlink" title="避免冗余¶"></a>避免冗余¶</h4><p>大多数动态网站会使用一些网站整体通用的设计——一个通用的页眉、页脚、导航栏，等等。Django 模板系统应该可以很容易地将这些元素存储在一个地方，从而减少重复的代码。</p><p>这是 模板继承 背后的理念。</p><h4 id="从-HTML-中解耦¶"><a href="#从-HTML-中解耦¶" class="headerlink" title="从 HTML 中解耦¶"></a>从 HTML 中解耦¶</h4><p>模板系统不应该被设计成只能输出 HTML。它应该同样擅长生成其他基于文本的格式，或者仅仅是纯文本。</p><h4 id="XML不应被用于模板语言¶"><a href="#XML不应被用于模板语言¶" class="headerlink" title="XML不应被用于模板语言¶"></a>XML不应被用于模板语言¶</h4><p>使用 XML 引擎去解析模板会在编辑模板的过程中引入很多人为错误，并在模板处理中导致不可接受的开销。</p><h4 id="承担设计能力¶"><a href="#承担设计能力¶" class="headerlink" title="承担设计能力¶"></a>承担设计能力¶</h4><p>模板系统不应该有的设计是，使得模板可以在WYSIWYG（所见即所得）编辑器中也能显示得很好，比如 Dreamweaver。因为这是一个非常严重的限制，会让模板的语法不够好。Django 期望模板编写者有能力直接编辑 HTML 文本。</p><h4 id="更加直接的处理空格¶"><a href="#更加直接的处理空格¶" class="headerlink" title="更加直接的处理空格¶"></a>更加直接的处理空格¶</h4><p>模板系统不应该用空白符来做神奇的事情。如果模板包含空白符，系统应该在处理文本时处理空格——只是显示它。任何不在模板标签中的空白符都应该显示出来。</p><h4 id="不要发明一种编程语言¶"><a href="#不要发明一种编程语言¶" class="headerlink" title="不要发明一种编程语言¶"></a>不要发明一种编程语言¶</h4><p>模板系统的目标不是发明一种编程语言。它的目标是提供足够的具有编程风格的功能，比如分支和循环，这对于做出表现相关的决策是至关重要的。Django 模板语言（DTL） 旨在避免高级逻辑。</p><p>Django 模板系统认为模板通常是由 设计师 编写的，而不是 程序员，因此不应该假设他了解 Python。</p><h4 id="安全与保障¶"><a href="#安全与保障¶" class="headerlink" title="安全与保障¶"></a>安全与保障¶</h4><p>开箱即用的模板系统禁止包含恶意代码，例如删除数据库记录的代码。</p><p>这就是模板系统不允许有任意Python代码的另一个原因。</p><h4 id="可扩展性¶"><a href="#可扩展性¶" class="headerlink" title="可扩展性¶"></a>可扩展性¶</h4><p>模板系统应该认识到, 高阶的模板作者可能想扩展它.</p><p>这是自定义的模板标签和过滤器背后的理念.</p><h3 id="视图¶"><a href="#视图¶" class="headerlink" title="视图¶"></a>视图¶</h3><h4 id="简洁¶"><a href="#简洁¶" class="headerlink" title="简洁¶"></a>简洁¶</h4><p>编写视图应该和编写 Python 函数一样简单。开发人员不应该在函数执行时实例化一个类。</p><h4 id="使用请求对象¶"><a href="#使用请求对象¶" class="headerlink" title="使用请求对象¶"></a>使用请求对象¶</h4><p>视图应该能够访问一个请求对象——一个储存关于当前请求的元数据的对象。对象应该直接传递给视图函数，而不是必须从全局变量访问请求数据的视图函数。这使得通过传入“假”请求对象来测试视图变得轻松、干净和容易。</p><h4 id="松耦合¶-2"><a href="#松耦合¶-2" class="headerlink" title="松耦合¶"></a>松耦合¶</h4><p>视图不应该关心开发人员使用哪种模板——甚至根本不用模板系统。</p><h4 id="GET-方法和-POST-方法的区别¶"><a href="#GET-方法和-POST-方法的区别¶" class="headerlink" title="GET 方法和 POST 方法的区别¶"></a>GET 方法和 POST 方法的区别¶</h4><p>GET 和 POST 是不同的；开发人员应该明确地使用其中一个或另一个。框架应该使得 GET 和 POST 数据很容易区分。</p><h3 id="缓存框架¶"><a href="#缓存框架¶" class="headerlink" title="缓存框架¶"></a>缓存框架¶</h3><p>缓存框架 的核心目的是：</p><h4 id="更少的代码¶-1"><a href="#更少的代码¶-1" class="headerlink" title="更少的代码¶"></a>更少的代码¶</h4><p>缓存应该尽可能快。因此，围绕缓存后端的所有框架代码都应该保持在绝对的最小值，特别是对于 get() 操作。</p><h4 id="一致性¶-1"><a href="#一致性¶-1" class="headerlink" title="一致性¶"></a>一致性¶</h4><p>缓存 API 应该为不同的缓存后端提供一致的接口。</p><h4 id="可扩展性¶-1"><a href="#可扩展性¶-1" class="headerlink" title="可扩展性¶"></a>可扩展性¶</h4><p>缓存 API 应该基于开发者的需求，在应用程序级别上是可扩展的（</p>]]></content>
      
      
      
        <tags>
            
            <tag> python web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask</title>
      <link href="/2023/07/18/flask/"/>
      <url>/2023/07/18/flask/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Flask是一个轻量级的可定制框架，使用Python语言编写，较其他同类型框架更为灵活、轻便、安全且容易上手。它可以很好地结合MVC模式进行开发，开发人员分工合作，小型团队在短时间内就可以完成功能丰富的中小型网站或Web服务的实现。</p></blockquote><p>Flask 依赖 Jinja 模板引擎和 Werkzeug WSGI(在Web应用和多种服务器之间的Python标准接口) 套件。</p><p><a href="https://jinja.palletsprojects.com/en/3.1.x/">Jinja documentation</a></p><p><a href="https://werkzeug.palletsprojects.com/">Werkzeug documentation</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>“微”并不代表整个应用只能塞在一个 Python 文件内， 当然塞在单一文件内也没有问题。”微”也不代表 Flask 功能不强。 微框架中的”微”字表示 Flask 的目标是保持核心简单而又可扩展。 Flask 不会替你做出许多决定，比如选用何种数据库。 类似的决定，如使用何种模板引擎，是非常容易改变的。 Flask 可以变成你任何想要的东西，一切恰到好处，由你做主。</p><p>默认情况下，flask不包括数据库抽象层、表单验证或其他任何可以处理该问题的库。相反，flask支持扩展来向应用程序添加这样的功能，就好像它是在flask本身中实现的一样。许多扩展提供了数据库集成、表单验证、上载处理、各种开放式身份验证技术等等。Flask可能是”微型的”，但它已经为满足您的各种生产需要做出了充足的准备。</p><h2 id="配置和惯例"><a href="#配置和惯例" class="headerlink" title="配置和惯例"></a>配置和惯例</h2><p>刚起步的时候 Flask 有许多带有合理默认值的配置值和惯例。按照惯例， 模板和静态文件存放在应用的 Python 源代码树的子目录中，名称分别为 templates 和 static 。惯例是可以改变的，但是你大可不必改变， 尤其是刚起步的时候。</p><p>Flask中的一个设计原则之一是简单地任务不应当使用很多的代码，应当可以简单地完成，但同时也不应当把程序员限制得太死。因此，Flask有一些设计思路，有些人可能会觉得惊讶或不正统。例如，flask在内部使用线程本地对象，这样就不必在同一个请求中因为线程安全的原因，而函数之间传递对象。这种方法很方便，但是当用于依赖注入或者当尝试重新使用了与请求挂钩的值的代码时，则需要一个合法的环境。flask项目对本地线程是直言不讳的，没有一点隐藏的意思，并且在使用本地线程时在代码中进行了标识和说明。</p><h2 id="做网络开发时要谨慎。"><a href="#做网络开发时要谨慎。" class="headerlink" title="做网络开发时要谨慎。"></a>做网络开发时要谨慎。</h2><p>构建Web应用程序时，请始终牢记安全性。</p><p>如果你开发了一个网络应用，那么可能会让用户注册并把他们的数据保存在服务器上。 用户把数据托付给了你。哪怕你的应用只是给自己用的，你也会希望数据完好无损。</p><p>不幸的是，有很多的方法可以攻击网络应用的安全性。Flask 可以防御 现代 Web 应用最常见的安全攻击：跨站代码攻击（ XSS ）。Flask 和 下层的 Jinja2 模板引擎会保护你免受这种攻击，除非故意把不安全的HTML代码放进来。但是攻击的方法依然还有很多。</p><p>文档将警告您有关需要注意安全性的Web开发方面。其中一些安全问题比人们想象的要复杂得多，我们有时都低估了漏洞被利用的可能性——直到一个聪明的人利用这个弱点来攻击我们的程序。不要认为你的应用程序不够重要，不足以吸引攻击者。根据攻击类型的不同，自动僵尸程序可能正在探索如何用垃圾邮件、恶意软件链接等填充你的数据库。</p><p>Flask与任何其他框架都没有区别，因为开发人员必须谨慎地构建，在构建到您的需求时要注意漏洞利用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具集合</title>
      <link href="/2023/07/18/tools/"/>
      <url>/2023/07/18/tools/</url>
      
        <content type="html"><![CDATA[<p>🚀🚀🚀 Zabbix</p><p>🚀🚀🚀 Grafana</p><p>🚀🚀🚀 Prometheus</p><p>🚀🚀🚀 Grpc</p><p>🚀🚀🚀 LDAP</p><p>🚀🚀🚀 IPAM</p><p>🚀🚀🚀 Elasticsearch Kibana</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具集合 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
